BMLoader={scripts:{},parseFile:(e,t)=>{var a=false,r="==Bookmarklet==",s="==/Bookmarklet==",o=/^(\s*\/\/\s*)/,i={name:"",version:"",description:"",repository:"",author:"",email:"",url:"",license:"",script:[],style:[]},l={},n=[],c=[],d=false;e.match(/[^\r\n]+/g).forEach((e,t,p)=>{if(o.test(e)){var h=e.replace(o,"").trim(),m=h.toLowerCase().replace(/\s+/g,"");if(!a){if(m==r.toLowerCase()){a=true;d=true}}else{if(m==s.toLowerCase()){a=false}else{var u=h.match(/^@([^\s]+)\s+(.*)$/);if(u){var f=u[1],k=u[2];if(f){if(Array.isArray(i[f])){l[f]=l[f]||[];l[f].push(k)}else{l[f]=k}}else{warn(`ignoring invalid metadata option: \`${f}\``)}}}}}else{n.push(e)}if(a&&t+1==p.length){c.push(`missing metdata block closing \`${s}\``)}});return{metadata:Object.assign(l,t),code:n.join("\n"),errors:c.length?c:null,bookmarklet:d}},processScript:async(scripttext,providedmd)=>{var parsed=BMLoader.parseFile(scripttext,providedmd),meta=parsed.metadata,code=parsed.code,waitScript=new Promise(async e=>{if(!meta.script){e()}else{meta.script.forEach(async(t,a,r)=>{var s=t,o=t.split(" "),i;if(o[0]=="dir"){await BMLoader.getGithub("coolreader18/bookmarklet-loader/depend-dir-scripts.min.json").then(e=>fetch(e)).then(e=>e.json()).then(e=>{var t=e[o[1].toLowerCase()];s=t.url.replace(/%version/,o[2]||t.latest);i=t.md})}await BMLoader.loadBookmarklet(s,i);if(a==r.length-1){e()}})}});if(meta.style){meta.style.forEach(async e=>{var t=e,a=e.split(" "),r=document.createElement("link");r.rel="stylesheet";r.href=t;if(a[0]=="dir"){await BMLoader.getGithub("coolreader18/bookmarklet-loader/depend-dir-styles.min.json").then(e=>fetch(e)).then(e=>e.json()).then(e=>{var r=e[a[1].toLowerCase()];t=r.url.replace(/%version/,a[2]||r.latest)})}document.head.append(r)})}Object.assign(parsed,providedmd);await waitScript;if(parsed.bookmarklet){var namespace=BMLoader.scripts[meta.name]=BMLoader.scripts[meta.name]||parsed;namespace.clicks=namespace.clicks+1||0;eval(`(() => {${code}})`).call(namespace)}else{eval(code)}return},loadBookmarklet:(e,t)=>{return fetch(e).then(e=>{if(e.ok){return e.text()}else{throw new Error("Couldn't load the bookmarklet")}}).then(e=>{BMLoader.processScript(e,t)}).catch(alert)},parseGithub:e=>{var t=e.split("/");return{slug:t.slice(0,2).join("/"),filepath:t.slice(2).join("/")}},getGithub:e=>{var t=BMLoader.parseGithub(e);return fetch(`https://api.github.com/repos/${t.slug}/releases/latest`).then(e=>{if(e.ok){return e.json().then(e=>`https://cdn.rawgit.com/${t.slug}/${e.tag_name}/${t.filepath}`)}else{throw new Error("Couldn't connect to GitHub")}}).catch(alert)},loadGithub:e=>{BMLoader.getGithub(e).then(e=>BMLoader.loadBookmarklet(e))}};